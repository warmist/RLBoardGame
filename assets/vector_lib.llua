local vec2metatable = {}
vec2metatable =
{
	__index = function(tbl, key) return vec2metatable[key] end,
	__unm = function(a)
		return vec2(-a[1], -a[2])
	end,
	__add = function(a, b)
		return vec2(a[1]+b[1],a[2]+b[2])
	end,
	__sub = function(a, b)
		return vec2(a[1]-b[1],a[2]-b[2])
	end,
	__mul = function(a, b)
		return vec2(a[1]*b,a[2]*b)
	end,
	__div = function(a, b)
		return vec2(a[1]/b,a[2]/b)
	end,
	__tostring = function(a)
		return string.format("vec2(%.2f,%.2f)",a[1],a[2])
	end,
	__eq = function(a, b)
		return a[1] == b[1] and a[2] == b[2]
	end,

	len = function(a) return math.sqrt(a:dot(a)) end,
	dot = function(a, b) return a[1]*b[1]+a[2]*b[2] end,
	distance = function(a, b) return (b-a):len() end,
	normalized = function(a) return a/a:len() end,
}

vec2 = function(x, y)
	return setmetatable({[1] = x or 0, [2] = y or 0 }, vec2metatable)
end

local vec3metatable = {}
vec3metatable =
{
	__index = function(tbl, key) return vec3metatable[key] end,
	__unm = function(a)
		return vec2(-a[1], -a[2],-a[3])
	end,
	__add = function(a, b)
		return vec2(a[1]+b[1],a[2]+b[2],a[3]+b[3])
	end,
	__sub = function(a, b)
		return vec2(a[1]-b[1],a[2]-b[2],a[3]-b[3])
	end,
	__mul = function(a, b)
		return vec2(a[1]*b,a[2]*b,a[3]*b)
	end,
	__div = function(a, b)
		return vec2(a[1]/b,a[2]/b,a[3]/b)
	end,
	__tostring = function(a)
		return string.format("vec2(%.2f,%.2f,%.2f)",a[1],a[2],a[3])
	end,
	__eq = function(a, b)
		return a[1] == b[1] and a[2] == b[2] and a[3]==b[3]
	end,

	len = function(a) return math.sqrt(a:dot(a)) end,
	dot = function(a, b) return a[1]*b[1]+a[2]*b[2]+a[3]*b[3] end,
	cross=function(a, b) return
		vec3(a[2]*b[3]-a[3]*b[2],
			 a[3]*b[1]-a[1]*b[3],
			 a[1]*b[2]-a[2]*b[1]) end,
	distance = function(a, b) return (b-a):len() end,
	normalized = function(a) return a/a:len() end,
}

vec3 = function(x, y, z)
	return setmetatable({[1] = x or 0, [2] = y or 0 ,[3]=z or 0}, vec3metatable)
end
return vec3metatable,vec2metatable